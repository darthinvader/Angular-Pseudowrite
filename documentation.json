{
    "pipes": [],
    "interfaces": [
        {
            "name": "Book",
            "id": "interface-Book-2c5487fd6e1ac584211211b1f2546fafb5038b94dfaae04c71b5e6192b737b8ea59081c613575868fd25f32d986c587bd7869e1b537e5170dc5cf87b1677afa4",
            "file": "src/models/Book.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Chapter } from \"./Chapter\";\r\n\r\nexport interface Book {\r\n  id: string;\r\n  title: string;\r\n}\r\n\r\nexport interface FirebaseBook {\r\n  title: string;\r\n  chaptersInfo: Chapter[]\r\n  imageUrl?: string;\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Chapter",
            "id": "interface-Chapter-34f484eddb3844f1fa0f3203e1dfb43b5ca6b9e4db770d032c518a126ecfd4612bfb1acdd13c1938d7144bd1cb672398025e944eb54cab9101ba374fdd89d3c0",
            "file": "src/models/Chapter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FirebaseChapter {\r\n  content: string;\r\n  title: string;\r\n}\r\n\r\nexport interface Chapter {\r\n  title: string;\r\n  id: string;\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FirebaseBook",
            "id": "interface-FirebaseBook-2c5487fd6e1ac584211211b1f2546fafb5038b94dfaae04c71b5e6192b737b8ea59081c613575868fd25f32d986c587bd7869e1b537e5170dc5cf87b1677afa4",
            "file": "src/models/Book.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Chapter } from \"./Chapter\";\r\n\r\nexport interface Book {\r\n  id: string;\r\n  title: string;\r\n}\r\n\r\nexport interface FirebaseBook {\r\n  title: string;\r\n  chaptersInfo: Chapter[]\r\n  imageUrl?: string;\r\n}",
            "properties": [
                {
                    "name": "chaptersInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Chapter[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FirebaseChapter",
            "id": "interface-FirebaseChapter-34f484eddb3844f1fa0f3203e1dfb43b5ca6b9e4db770d032c518a126ecfd4612bfb1acdd13c1938d7144bd1cb672398025e944eb54cab9101ba374fdd89d3c0",
            "file": "src/models/Chapter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FirebaseChapter {\r\n  content: string;\r\n  title: string;\r\n}\r\n\r\nexport interface Chapter {\r\n  title: string;\r\n  id: string;\r\n}",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FirebaseUser",
            "id": "interface-FirebaseUser-88e1ba8b1944eda80560223b98b0dc3cc5513f59a4f0cd1452b2318289fde5726c020132c19bbd199d123008168d3c7ee414a956f66abc4025d499aef21a0ea3",
            "file": "src/models/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Book } from './Book';\r\nexport interface FirebaseUser {\r\n  booksInfo: Book[]\r\n}",
            "properties": [
                {
                    "name": "booksInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-e8b862bebac7ba6a21daff30e1e04bd618bde1d72db4791a73a268a52656702bdb422bcff7588f25e288322014ce54e0471419c34f271d1c6c9af6505c50301e",
            "file": "src/services/auth.service.ts",
            "properties": [
                {
                    "name": "afAuth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AngularFireAuth",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "userIdSubject",
                    "defaultValue": "new BehaviorSubject<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCurrentUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string | null>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSignedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signInWithGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "signOutGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { BehaviorSubject, Observable, map } from 'rxjs';\r\n  import { Injectable } from '@angular/core';\r\n  import { AngularFireAuth } from '@angular/fire/compat/auth';\r\n  import firebase from 'firebase/compat/app';\r\n  @Injectable({ providedIn: 'root' })\r\n  export class AuthService {\r\n    private userIdSubject = new BehaviorSubject<string | null>(null);\r\n\r\n    constructor(public afAuth: AngularFireAuth) {\r\n      this.afAuth.authState.subscribe(user => {\r\n        this.userIdSubject.next(user ? user.uid : null);\r\n      });\r\n    }\r\n    async signInWithGoogle() {\r\n      const provider = new firebase.auth.GoogleAuthProvider();\r\n      try {\r\n        this.afAuth.signInWithPopup(provider);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n    async signOutGoogle() {\r\n      await this.afAuth.signOut()\r\n    }\r\n\r\n    isSignedIn() {\r\n      return this.afAuth.authState;\r\n    }\r\n\r\n    getCurrentUserId(): Observable<string | null> {\r\n      return this.userIdSubject.asObservable();\r\n    }\r\n  }\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "afAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FirestoreService",
            "id": "injectable-FirestoreService-0a24d33a27f28014634e382def969e22354295372bfe0beac756b3916c435388f08062854b6262ff63184326973be4076b85a25bca62f948d6122890da5a379f",
            "file": "src/services/firestore.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createBook",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "imageUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createChapter",
                    "args": [
                        {
                            "name": "bookId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bookId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBook",
                    "args": [
                        {
                            "name": "bookId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bookId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteChapter",
                    "args": [
                        {
                            "name": "bookId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "chapterId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bookId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chapterId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchBook",
                    "args": [
                        {
                            "name": "bookId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<FirebaseBook | undefined>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bookId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchChapter",
                    "args": [
                        {
                            "name": "bookId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "chapterId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<FirebaseChapter | undefined>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bookId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chapterId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<FirebaseUser | undefined>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string | null>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "writeBook",
                    "args": [
                        {
                            "name": "bookId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "imageUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bookId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeChapter",
                    "args": [
                        {
                            "name": "bookId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "chapterId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bookId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chapterId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { Observable, throwError, switchMap, catchError } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport { FirebaseBook } from '../models/Book';\nimport { FirebaseChapter } from '../models/Chapter';\nimport { FirebaseUser } from '../models/User';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FirestoreService {\n\n  constructor(\n    private firestore: AngularFirestore,\n    private authService: AuthService\n  ) { }\n\n  private getCurrentUserId(): Observable<string | null> {\n    return this.authService.getCurrentUserId();\n  }\n\n  createBook(title: string, imageUrl?: string): Observable<void> {\n    return this.getCurrentUserId().pipe(\n      switchMap(userId => {\n        if (!userId) throw new Error(\"User not authenticated\");\n        const bookRef = this.firestore.collection<FirebaseBook>(`users/${userId}/books`).doc();\n        return bookRef.set({ title, chaptersInfo: [] });\n      }),\n      catchError(error => throwError(() => error))\n    );\n  }\n\n  createChapter(bookId: string, title: string, content: string): Observable<void> {\n    return this.getCurrentUserId().pipe(\n      switchMap(userId => {\n        if (!userId) throw new Error(\"User not authenticated\");\n        const chapterRef = this.firestore.collection<FirebaseChapter>(`users/${userId}/books/${bookId}/chapters`).doc();\n        return chapterRef.set({ title, content });\n      }),\n      catchError(error => throwError(() => error))\n    );\n  }\n\n  fetchBook(bookId: string): Observable<FirebaseBook | undefined> {\n    return this.getCurrentUserId().pipe(\n      switchMap(userId => {\n        if (!userId) throw new Error(\"User not authenticated\");\n        return this.firestore.doc<FirebaseBook>(`users/${userId}/books/${bookId}`).valueChanges();\n      }),\n      catchError(error => throwError(() => error))\n    );\n  }\n\n  fetchChapter(bookId: string, chapterId: string): Observable<FirebaseChapter | undefined> {\n    return this.getCurrentUserId().pipe(\n      switchMap(userId => {\n        if (!userId) throw new Error(\"User not authenticated\");\n        return this.firestore.doc<FirebaseChapter>(`users/${userId}/books/${bookId}/chapters/${chapterId}`).valueChanges();\n      }),\n      catchError(error => throwError(() => error))\n    );\n  }\n\n  fetchUserData(): Observable<FirebaseUser | undefined> {\n    return this.getCurrentUserId().pipe(\n      switchMap(userId => {\n        if (!userId) throw new Error(\"User not authenticated\");\n        return this.firestore.doc<FirebaseUser>(`users/${userId}`).valueChanges();\n      }),\n      catchError(error => throwError(() => error))\n    );\n  }\n\n  writeBook(bookId: string, title: string, imageUrl: string): Observable<void> {\n    return this.getCurrentUserId().pipe(\n      switchMap(userId => {\n        if (!userId) throw new Error(\"User not authenticated\");\n        return this.firestore.doc(`users/${userId}/books/${bookId}`).set({ title, imageUrl }, { merge: true });\n      }),\n      catchError(error => throwError(() => error))\n    );\n  }\n\n  writeChapter(bookId: string, chapterId: string, title: string, content: string): Observable<void> {\n    return this.getCurrentUserId().pipe(\n      switchMap(userId => {\n        if (!userId) throw new Error(\"User not authenticated\");\n        return this.firestore.doc(`users/${userId}/books/${bookId}/chapters/${chapterId}`).set({ title, content }, { merge: true });\n      }),\n      catchError(error => throwError(() => error))\n    );\n  }\n\n  deleteBook(bookId: string): Observable<void> {\n    return this.getCurrentUserId().pipe(\n      switchMap(userId => {\n        if (!userId) throw new Error(\"User not authenticated\");\n        return this.firestore.doc(`users/${userId}/books/${bookId}`).delete();\n      }),\n      catchError(error => throwError(() => error))\n    );\n  }\n\n  deleteChapter(bookId: string, chapterId: string): Observable<void> {\n    return this.getCurrentUserId().pipe(\n      switchMap(userId => {\n        if (!userId) throw new Error(\"User not authenticated\");\n        return this.firestore.doc(`users/${userId}/books/${bookId}/chapters/${chapterId}`).delete();\n      }),\n      catchError(error => throwError(() => error))\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-23ddc74baaa63425813a0ce5c6925b9d0aa5133b28a159fed0ad042450ecc50030f6e7fac182bb4d95756103cfe27fa21bd330fa07d316ecb140db5ce9396b9a",
            "file": "src/services/storage-service.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageService {\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) { }\n\n  setItem(key: string, value: any): void {\n    if (isPlatformBrowser(this.platformId)) {\n      localStorage.setItem(key, JSON.stringify(value));\n    }\n  }\n\n  getItem(key: string): any {\n    if (isPlatformBrowser(this.platformId)) {\n      const item = localStorage.getItem(key);\n      return item ? JSON.parse(item) : null;\n    }\n    return null;\n  }\n\n  removeItem(key: string): void {\n    if (isPlatformBrowser(this.platformId)) {\n      localStorage.removeItem(key);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TextGenerationService",
            "id": "injectable-TextGenerationService-ba68bf12b488a57572a3c7c64d11144ba7727a35ff4e8cf51845c68ee43f17234f4496c32716104423a3de7960305abb000c400b68214cf082fde9170e84dc84",
            "file": "src/services/text-generation.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://127.0.0.1:1234'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "eventSource",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventSource | null",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "messageSubject",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getChatCompletions",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCompletions",
                    "args": [
                        {
                            "name": "prompt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "prompt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable | null",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSseConnection",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\n@Injectable({\n  providedIn: 'root'\n})\nexport class TextGenerationService {\n  private apiUrl = 'http://127.0.0.1:1234';\n  private eventSource: EventSource | null = null;\n  private messageSubject = new Subject<any>();\n\n  constructor(private http: HttpClient, @Inject(PLATFORM_ID) private platformId: Object) { }\n\n  getCompletions(prompt: string) {\n    return this.http.post(`${this.apiUrl}/v1/completions`, {\n      prompt: prompt,\n      max_tokens: 200,\n      temperature: 1,\n      top_p: 0.9,\n      seed: 10,\n    });\n  }\n\n  setupSseConnection(): Observable<any> {\n    return new Observable(observer => {\n      this.eventSource = new EventSource(`${this.apiUrl}/v1/chat/completions`);\n\n      this.eventSource.onmessage = event => {\n        observer.next(event.data);\n      };\n\n      this.eventSource.onerror = error => {\n        observer.error(error);\n      };\n\n      return () => {\n        this?.eventSource?.close();\n      };\n    });\n  }\n\n  getChatCompletions(message: string) {\n    return this.http.post(`${this.apiUrl}/v1/chat/completions`, {\n      messages: [{ role: 'user', content: message }],\n      mode: 'instruct',\n      instruction_template: 'Alpaca',\n      stream: false,\n    });\n  }\n\n  getMessages(): Observable<any> | null {\n    if (isPlatformBrowser(this.platformId)) {\n      return this.messageSubject.asObservable();\n    } else {\n      return null;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-92e01d16bf1c2908f377538b0443ed34405efb996f0e9ee49a45e2f6a8dcf0661f6047d5a184382f9df767c401d7348ed9c8049b782a08d70187f9004ba40b95",
            "file": "src/services/theme-service.ts",
            "properties": [
                {
                    "name": "theme",
                    "defaultValue": "'light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Theme",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCurrentTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { LocalStorageService } from './storage-service.service';\n\nexport const THEMES = ['light', 'dark', 'focus'];\nexport type Theme = 'light' | 'dark' | 'focus';\n\n@Injectable({ providedIn: 'root' })\nexport class ThemeService {\n  private theme: Theme = 'light';\n\n  constructor(\n    private localStorage: LocalStorageService,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n    this.initializeTheme();\n  }\n\n  private initializeTheme(): void {\n    // Safely retrieve the theme from local storage\n    let savedTheme: string | null;\n    try {\n      savedTheme = this.localStorage.getItem('theme');\n      if (savedTheme && THEMES.includes(savedTheme)) {\n        this.setTheme(savedTheme as Theme);\n      } else {\n        this.setTheme('light');\n      }\n    } catch (error) {\n      console.error('Error reading theme from local storage:', error);\n      this.setTheme('light'); // Fallback to default theme in case of error\n    }\n  }\n\n  setTheme(theme: Theme): void {\n    this.theme = theme;\n    this.localStorage.setItem('theme', theme);\n    if (isPlatformBrowser(this.platformId)) {\n      document.documentElement.setAttribute('data-theme', theme);\n    }\n  }\n\n  getCurrentTheme(): Theme {\n    return this.theme;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localStorage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "localStorage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "Object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AboutComponent",
            "id": "component-AboutComponent-42568c707ebe8500ee90c6ed595a0bc4af9e8d1a1e41c2301c969f31e0a4b8bf23a4beadf6783a66cbcfd819551ca35a38f4346d8fb5d3746f1acf88640000db",
            "file": "src/app/about/about.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./about.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faBook",
                    "defaultValue": "faBook",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "faBrain",
                    "defaultValue": "faBrain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "faRobot",
                    "defaultValue": "faRobot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "faUsers",
                    "defaultValue": "faUsers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faRobot, faCircleNotch, faBrain, faUsers, faBook } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-about',\n  standalone: true,\n  imports: [\n    CommonModule, FontAwesomeModule\n  ],\n  styleUrl: './about.component.scss',\n  templateUrl: './about.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AboutComponent {\n  faRobot = faRobot;\n  faBrain = faBrain\n  faUsers = faUsers\n  faBook = faBook\n}\n",
            "styleUrl": "./about.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"bg-gradient-to-r text-primary px-6 py-12 rounded-lg shadow-xl animate-fadeIn m-8\">\n  <h1 class=\"text-4xl font-bold mb-6 flex items-center\">\n    🤖 About PseudoWrite ✍️\n  </h1>\n  <div class=\"space-y-4 ml-6\">\n    <p class=\"flex items-center animate-slideInLeft\">\n      <span class=\"text-xl animate-bounce\">📘</span>\n      Welcome to PseudoWrite, where your writing journey is assisted by cutting-edge AI technology. Our platform offers unique tools to help authors at every stage of their writing process, from brainstorming ideas to polishing final drafts.\n    </p>\n    <p class=\"flex items-center animate-slideInRight\">\n      <span class=\"text-xl animate-wiggle\">🖲️</span>\n      Our AI-driven features provide personalized suggestions, plot development ideas, character insights, and much more, helping you overcome writer's block and enhance your storytelling.\n    </p>\n    <p class=\"flex items-center animate-slideInLeft\">\n      <span class=\"text-xl\">👥</span>\n      Whether you're a seasoned author or just starting, PseudoWrite is here to support your creative journey. Embrace the future of writing with PseudoWrite, where every story finds its voice.\n    </p>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f020e922bd2ccd8efff3d3df8a10dbba068552e613b5105a0b4df3baa80b4f3e473d600f2839d3bce05b46b58513ed8f59ebd95acef36bb10643c0331af59d46",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "textGenerationService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextGenerationService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'angular-pseudowrite'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "BackgroundComponent",
                    "type": "component"
                },
                {
                    "name": "HomeComponent",
                    "type": "component"
                },
                {
                    "name": "NavbarComponent",
                    "type": "component"
                },
                {
                    "name": "HttpClientModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { TextGenerationService } from './../services/text-generation.service';\r\nimport { NavbarComponent } from './navbar/navbar.component';\r\nimport { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { BackgroundComponent } from './background/background.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterOutlet, BackgroundComponent, HomeComponent, NavbarComponent, HttpClientModule],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss'\r\n})\r\nexport class AppComponent {\r\n  title = 'angular-pseudowrite';\r\n  constructor(public textGenerationService: TextGenerationService) { }\r\n\r\n  onClick() {\r\n    this.textGenerationService.getChatCompletions('Write a 20 word poem').subscribe((response) => {\r\n      console.log(response)\r\n    })\r\n  }\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "textGenerationService",
                        "type": "TextGenerationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "textGenerationService",
                        "type": "TextGenerationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"bg-page w-screen h-screen\">\r\n  <app-navbar></app-navbar>\r\n  <router-outlet></router-outlet>\r\n</div>"
        },
        {
            "name": "BackgroundComponent",
            "id": "component-BackgroundComponent-210929d754ff785e4258a92d8d5d492f6e840f610ea9675b3ac54b1e01efb93501a60bdb64c878e907a710f25a2b66e408fd88b105a3541f89077664a3b0a28b",
            "file": "src/app/background/background.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-background",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./background.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'app-background',\n  standalone: true,\n  imports: [\n    CommonModule,\n  ],\n  templateUrl: './background.component.html',\n  styleUrl: './background.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BackgroundComponent { }\n",
            "styleUrl": "./background.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\n  <div class=\"stars\">\n    @for(_ of [].constructor(50); track $index){\n      <div class=\"star\"></div>\n    }\n  </div>\n</div>"
        },
        {
            "name": "BookCardComponent",
            "id": "component-BookCardComponent-e8296231f99e332925350afd93a7b71c60f94cee08e92b1f7410be8af69472f12c03067651e14cf3064912df9003262f7893d25999adf4792392a0edeff683d2",
            "file": "src/app/book-collection/book-card/book-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-book-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./book-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "book",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Book",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faTrashAlt",
                    "defaultValue": "faTrashAlt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "book",
                            "type": "Book",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "book",
                            "type": "Book",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Book } from '../../../models/Book';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-book-card',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FontAwesomeModule,\n    RouterModule,\n  ],\n  templateUrl: './book-card.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BookCardComponent {\n  @Input() book?: Book;\n  faTrashAlt = faTrashAlt;\n\n  click(book?: Book) { console.log(book) }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "  <div class=\"max-w bg-div rounded overflow-hidden shadow-lg cursor-pointer hover:scale-105 transform duration-300 ease-in-out\">\n    <a [routerLink]=\"['/book', book?.id, 'chapter']\" routerLinkActive=\"active\" (click)=\"click(book)\">\n          <div class=\"h-full\">\n        <div class=\"p-6 flex justify-center align-middle\">\n          <div class=\"font-bold text-2xl mb-2\">{{ book?.title }}</div>\n        </div>\n      </div>\n    </a>\n  </div>\n"
        },
        {
            "name": "BookCollectionComponent",
            "id": "component-BookCollectionComponent-1584c99a7be89a903c055b30e53cf039650022cb2305e46526c8925cb433d5125e649540e3bee6330cc26d30f65d349d5742e791de0c663ad661f78ff30fdb23",
            "file": "src/app/book-collection/book-collection.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-book-collection",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./book-collection.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "books",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Book[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "faPlus",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewBook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "BookCardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { BookCardComponent } from './book-card/book-card.component';\nimport { FirestoreService } from '../../services/firestore.service';\nimport { Book } from '../../models/Book';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../../services/auth.service';\n@Component({\n  selector: 'app-book-collection',\n  standalone: true,\n  imports: [CommonModule, BookCardComponent],\n  templateUrl: './book-collection.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BookCollectionComponent {\n  @Input() books: Book[] = [];\n  faPlus = faPlus;\n  private authSubscription: Subscription | undefined;\n\n  constructor(\n    private firestore: FirestoreService,\n    private authService: AuthService,\n    private cd: ChangeDetectorRef\n  ) { }\n\n  ngOnInit() {\n    this.authSubscription = this.authService.isSignedIn().subscribe(authenticated => {\n      if (authenticated) {\n      } else {\n        this.books = [];\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.authSubscription) {\n      this.authSubscription.unsubscribe();\n    }\n  }\n\n\n  addNewBook() {\n    console.log('Adding new book:');\n    this.firestore.createBook('New Book').subscribe({\n      next: () => console.log('New book added successfully'),\n      error: (err) => console.error('Error adding new book:', err),\n      complete: () => console.log('Completed adding new book'),\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "FirestoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "FirestoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"flex flex-col bg-div p-8 rounded-lg text-primary\">\n  <div class=\"flex flex-col justify-between items-center align-middle\"> \n    <div class=\"text-3xl text-center flex-1\">Your Books📚</div>\n    <button (click)=\"addNewBook()\"\n            class=\"absolute self-end text-md gap-2 px-6 py-2 bg-opacity-90 bg-button text-primary rounded-lg shadow hover:bg-button-hover hover:text-primary-hover hover:shadow-lg focus:outline-none active:scale-95 transition ease-in-out duration-300\" >\n      ➕ Create New Book\n    </button>\n  </div>\n  @if(books.length != 0){\n    <div class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 p-6 m-4 border-border-color border shadow rounded-lg\">\n      @for(book of books; track book.id){\n        <app-book-card [book]=\"book\"></app-book-card>\n      }\n    </div>\n  } @else{\n    <div *ngIf=\"books.length === 0\" class=\"text-primary text-center p-6 m-4 border-border-color border shadow rounded-lg\">\n      <p>No books yet. Click \"Add New Book\" to start!📖</p>\n    </div>\n  }\n</div>\n"
        },
        {
            "name": "BookTitleComponent",
            "id": "component-BookTitleComponent-605c3d279313a9c65dd6ee7d55ba0d82d7fbba3c953c1d58d725e4b5bcbda10ca11358240b63700dda7a1cf3d65e0cf446df1eb08c8f9c60c192922cfe8c520e",
            "file": "src/app/chapter-organiser/book-title/book-title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-book-title",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./book-title.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "bookId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "bookName",
                    "defaultValue": "'Book'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editingTitle",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "faBookOpen",
                    "defaultValue": "faBookOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "faFileImport",
                    "defaultValue": "faFileImport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "faPlus",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "originalBookName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewFile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "importFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTitleBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTitleClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTitleEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { faBookOpen, faFileImport, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { FirestoreService } from '../../../services/firestore.service';\n\n@Component({\n  selector: 'app-book-title',\n  standalone: true,\n  imports: [\n    CommonModule, FormsModule, FontAwesomeModule\n  ],\n  templateUrl: './book-title.component.html',\n})\nexport class BookTitleComponent {\n  @Input() bookName: string = 'Book'\n  @Input() bookId?: string;\n  editingTitle: boolean = false;\n  originalBookName: string = ''\n  faFileImport = faFileImport;\n  faPlus = faPlus;\n  faBookOpen = faBookOpen\n  constructor(private firestoreService: FirestoreService) { }\n\n  onTitleClick(): void {\n    this.editingTitle = true;\n    this.originalBookName = this.bookName; // Store the original book name\n  }\n\n  onTitleEnter(): void {\n    if (!this.bookName.trim()) {\n      this.bookName = this.originalBookName; // Revert to original name if empty\n    }\n    this.editingTitle = false;\n  }\n\n  onTitleBlur(): void {\n    if (!this.bookName.trim()) {\n      this.bookName = this.originalBookName; // Revert to original name if empty\n    }\n    this.editingTitle = false;\n  }\n\n\n  importFiles(): void {\n    // Implement file import logic here\n  }\n\n  addNewFile(): void {\n    if (!this.bookId) {\n      console.error('Book ID is not provided');\n      return;\n    }\n\n    this.firestoreService.createChapter(this.bookId, 'New Chapter', '').subscribe({\n      next: () => console.log('New chapter added successfully'),\n      error: (err: any) => console.error('Error adding new chapter:', err),\n      complete: () => console.log('Completed adding new chapter'),\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestoreService",
                        "type": "FirestoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "firestoreService",
                        "type": "FirestoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"flex flex-col items-center mb-6\">\n  <div class=\"flex mb-2 justify-center align-middle\">\n    <div *ngIf=\"!editingTitle\" (click)=\"onTitleClick()\" class=\"cursor-pointer\">\n      <p class=\"text-2xl font-semibold\">📙{{ bookName }}</p>\n    </div>\n    <input *ngIf=\"editingTitle\" [(ngModel)]=\"bookName\" (blur)=\"onTitleBlur()\" \n            (keyup.enter)=\"onTitleEnter()\" class=\"form-input border border-border-color rounded py-1 px-2 text-xl\">\n  </div>\n  <div class=\"flex gap-1\">\n    <button (click)=\"importFiles()\" class=\"flex gap-1 bg-button text-primary hover:bg-button-hover hover:text-primary-hover active:bg-button-active active:text-primary-active font-bold py-1 px-4 rounded items-center\">\n      <fa-icon [icon]=\"faFileImport\"></fa-icon>\n      Import\n    </button>\n    <button (click)=\"addNewFile()\" class=\"flex gap-1 bg-button text-primary hover:bg-button-hover hover:text-primary-hover active:bg-button-active active:text-primary-active font-bold py-1 px-4 rounded items-center\">\n      <fa-icon [icon]=\"faPlus\"></fa-icon>\n      Add New\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "ChapterComponent",
            "id": "component-ChapterComponent-1ddd3c83628a9d465401d92e5c605b0f3888890f48b68ef125308cc96c0109fbb61335eea69769ab8ebf2d62e37c2c4126c60941bbe8b8e95449c2de72730afd",
            "file": "src/app/chapter-organiser/chapter/chapter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chapter",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./chapter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "chapterId",
                    "defaultValue": "'-1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faClone",
                    "defaultValue": "faClone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "faFileExport",
                    "defaultValue": "faFileExport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "faFileLines",
                    "defaultValue": "faFileLines",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "faGripVertical",
                    "defaultValue": "faGripVertical",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "faTrash",
                    "defaultValue": "faTrash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteFile",
                    "args": [
                        {
                            "name": "chapterid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "chapterid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "duplicateFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "DragDropModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faFileLines, faGripVertical, faTrash, faFileExport, faClone, } from '@fortawesome/free-solid-svg-icons';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { CommonModule } from '@angular/common';\n@Component({\n  selector: 'app-chapter',\n  standalone: true,\n  imports: [\n    CommonModule, FontAwesomeModule, DragDropModule\n  ],\n  templateUrl: './chapter.component.html',\n})\nexport class ChapterComponent {\n  @Input() title = '';\n  @Input() chapterId: string = '-1';\n\n  faFileLines = faFileLines\n  faGripVertical = faGripVertical\n  faTrash = faTrash;\n  faFileExport = faFileExport;\n  faClone = faClone;\n\n  deleteFile(chapterid: string): void {\n    // Implement file deletion logic\n  }\n\n  exportFile(file: string): void {\n    // Implement file export logic\n  }\n\n  duplicateFile(file: string): void {\n    // Implement file duplication logic\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div cdkDrag class=\"py-2 px-4 flex justify-between items-center bg-transparent font-semibold hover:bg-button-hover text-primary hover:text-primary-hover rounded hover:shadow-sm\">\n  <div class=\"flex items-center gap-1\" >\n    <button class=\"focus:outline-none\" title=\"Drag File\">\n      <fa-icon [icon]=\"faGripVertical\"></fa-icon>\n    </button>\n    <fa-icon [icon]=\"faFileLines\"></fa-icon>\n    {{ title }}\n  </div>\n  <div class=\"flex items-center gap-2\">\n    <button (click)=\"deleteFile(chapterId)\" title=\"Delete File\" class=\"focus:outline-none\">\n      <fa-icon [icon]=\"faTrash\"></fa-icon>\n    </button>\n    <button (click)=\"exportFile(chapterId)\" title=\"Export File\" class=\"focus:outline-none\">\n      <fa-icon [icon]=\"faFileExport\"></fa-icon>\n    </button>\n    <button (click)=\"duplicateFile(chapterId)\" title=\"Duplicate File\" class=\"focus:outline-none\">\n      <fa-icon [icon]=\"faClone\"></fa-icon>\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "ChapterOrganizerComponent",
            "id": "component-ChapterOrganizerComponent-bbe7df3c1026e5733e92812e296e3c270041448cf0ad092409e5f6a8d2c507144836cbd7d3af07b7a5249e116ab732d94d7ae015b5a21263d075e56a35c7d455",
            "file": "src/app/chapter-organiser/chapter-organiser.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chapter-organiser",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./chapter-organiser.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "book",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Book",
                    "decorators": []
                },
                {
                    "name": "chapters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Chapter[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faFolderOpen",
                    "defaultValue": "faFolderOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "DragDropModule",
                    "type": "module"
                },
                {
                    "name": "BookTitleComponent",
                    "type": "component"
                },
                {
                    "name": "ChapterComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChapterComponent } from './chapter/chapter.component';\nimport { BookTitleComponent } from './book-title/book-title.component';\nimport { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { faFolderOpen } from '@fortawesome/free-solid-svg-icons';\nimport { CdkDragDrop, moveItemInArray, DragDropModule } from '@angular/cdk/drag-drop';\nimport { Book } from '../../models/Book';\nimport { Chapter } from '../../models/Chapter';\n@Component({\n  selector: 'app-chapter-organiser',\n  standalone: true,\n  imports: [\n    CommonModule, FontAwesomeModule, DragDropModule, BookTitleComponent, ChapterComponent\n  ],\n  templateUrl: './chapter-organiser.component.html',\n})\nexport class ChapterOrganizerComponent {\n  @Input() chapters?: Chapter[] = [];\n  @Input() book?: Book;\n  faFolderOpen = faFolderOpen\n\n  onDrop(event: CdkDragDrop<string[]>) {\n    if (this.chapters)\n      moveItemInArray(this?.chapters, event.previousIndex, event.currentIndex);\n    console.log(this.chapters, event)\n  }\n}\n\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"p-4 border-2 border-border-color rounded-lg shadow-lg bg-default opacity-80\">\n  <app-book-title></app-book-title>\n  <div class=\"m-2 flex flex-col border-2 border-border-color rounded-lg shadow-md\" cdkDropList (cdkDropListDropped)=\"onDrop($event)\">\n    @for (chapter of chapters; track $index) {\n        <app-chapter></app-chapter>\n    } @empty {\n      <div class=\"text-center text-primary my-8\">\n        <fa-icon [icon]=\"faFolderOpen\" class=\"text-3xl\"></fa-icon>\n        <p>No files yet. Click \"Add New\" to start!</p>\n      </div>\n    }\n  </div>\n</div>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-29af6aa3c3256a051dd257e8ee4dc9269edf6475c2b5fc71bc9352fd1158441a761230f48c5556ceb4ba1acbbcb69e1c84cd0ef250b6e1e00782142a99cf7a8c",
            "file": "src/app/home/home.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "books",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "BookCollectionComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { BookCollectionComponent } from './../book-collection/book-collection.component';\nimport { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  standalone: true,\n  imports: [\n    CommonModule, BookCollectionComponent,\n  ],\n  templateUrl: './home.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HomeComponent {\n  @Input() books: any = []\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"grid grid-cols-10 gap-4 py-10 my-8 mx-10\">\n  <div class=\"col-span-7 col-start-1\">\n    <app-book-collection></app-book-collection> \n  </div>\n  <div class=\"col-span-3 bg-div text-primary rounded-lg p-6 text-center\">\n    <h2 class=\"text-2xl font-bold mb-4\">AI Writing Assistant</h2>\n    <p class=\"text-lg\">Enhance your writing with AI-driven insights and suggestions.</p>\n  </div>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-70934402e83eeec72519c097eddf7de9ca1621908df8ea2b158d5e632dbf26491af36f2df04884a383f736beb3f40a557baa654ce4a2445cabe7d71818518435",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "faGoogle",
                    "defaultValue": "faGoogle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "onGoogleLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onGoogleLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\r\nimport firebase from 'firebase/compat/app';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faGoogle } from '@fortawesome/free-brands-svg-icons'\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [CommonModule, FontAwesomeModule],\r\n  templateUrl: './login.component.html',\r\n\r\n})\r\nexport class LoginComponent {\r\n  constructor(public authService: AuthService, private firestore: AngularFirestore) { }\r\n  faGoogle = faGoogle\r\n\r\n\r\n  onGoogleLogin() {\r\n    this.authService.signInWithGoogle()\r\n  }\r\n\r\n  onGoogleLogout() {\r\n    this.authService.signOutGoogle()\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "firestore",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "firestore",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "@if(!!(authService.isSignedIn() | async)){\r\n  <button class=\"text-sm px-6 py-2 bg-button text-primary rounded-lg shadow hover:bg-button-hover hover:text-primary-hover active:bg-button-active active:text-primary-active focus:outline-none transition ease-in-out duration-300\" (click)=\"onGoogleLogout()\">\r\n    <fa-icon [icon]='faGoogle'></fa-icon>\r\n    <span class=\"ml-2\">Logout</span>\r\n  </button>\r\n} @else {\r\n  <button class=\"text-sm px-6 py-2 bg-button text-primary rounded-lg shadow hover:bg-button-hover hover:text-primary-hover active:bg-button-active active:text-primary-active focus:outline-none transition ease-in-out duration-300\" (click)=\"onGoogleLogin()\">\r\n    <fa-icon [icon]='faGoogle'></fa-icon>\r\n    <span class=\"ml-2\">Login with Google</span>\r\n  </button>\r\n}"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-0985ab37ce0757a5c60deb87016ce1fb64db138d5004a26f6346377e559a7241693399bfdbbb5458b126224127692a799af71415349564bca81d7605ddc949f5",
            "file": "src/app/navbar/navbar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "LoginComponent",
                    "type": "component"
                },
                {
                    "name": "ThemeSwitchComponent",
                    "type": "component"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { LoginComponent } from '../login/login.component';\nimport { ThemeSwitchComponent } from '../theme-switch/theme-switch.component';\nimport { RouterModule } from '@angular/router';\n@Component({\n  selector: 'app-navbar',\n  standalone: true,\n  imports: [\n    CommonModule, LoginComponent, ThemeSwitchComponent, RouterModule\n  ],\n  templateUrl: './navbar.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavbarComponent { }\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"bg-div text-primary px-4 flex justify-between items-center rounded-b-lg\">\r\n    <div class=\"flex items-center\">\r\n        <span class=\"text-xl font-bold mr-4\"><a  [routerLink]=\"['/']\" routerLinkActive=\"active\" class=\"hover:text-primary-hover\">PseudoWrite</a></span>\r\n        <nav>\r\n            <ul class=\"flex\">\r\n                <li>\r\n                  <a [routerLink]=\"['/about']\" routerLinkActive=\"active\" class=\"flex hover:text-primary-hover px-6 py-4 hover:bg-button-hover active:bg-button-active w-full h-full\">About</a>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    </div>\r\n    <div class=\"flex flex-column align-middle justify-center items-center gap-10\">\r\n      <app-theme-switch></app-theme-switch>\r\n      <app-login></app-login>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "TextEditorComponent",
            "id": "component-TextEditorComponent-8744eed19c2b97abe54a4685f7dba9d2dd086d005193ad4a5cb74f35ed4aa508b15086544fdef9340592550910f76556e2701006efcba0a66f011fc929ee6338",
            "file": "src/app/text-editor/text-editor.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-text-editor",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./text-editor.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "editorConfig",
                    "defaultValue": "editorConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "htmlContent",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "htmlContentChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "giveDifferentWording",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "performRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HttpClientModule",
                    "type": "module"
                },
                {
                    "name": "AngularEditorModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "HttpClientModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { AngularEditorModule } from '@kolkov/angular-editor';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { editorConfig } from './editorDefaults';\r\n\r\n@Component({\r\n  selector: 'app-text-editor',\r\n  standalone: true,\r\n  imports: [CommonModule, HttpClientModule, AngularEditorModule, FormsModule, HttpClientModule],\r\n  templateUrl: './text-editor.component.html',\r\n  styleUrl: './text-editor.component.scss',\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TextEditorComponent {\r\n  @Input() htmlContent = ''\r\n  @Input() editorConfig = editorConfig\r\n  @Output() htmlContentChange = new EventEmitter();\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  saveContent() {\r\n    // Emitting the current htmlContent\r\n    this.htmlContentChange.emit(this.htmlContent);\r\n  }\r\n\r\n  performRequest() {\r\n    const url = 'http://localhost:1234/v1/chat/completions';\r\n\r\n    if (window.getSelection) {\r\n      let selection = window.getSelection();\r\n      const body = {\r\n        messages: [\r\n          { role: 'system', content: 'Always answer in rhymes.' },\r\n          { role: 'user', content: selection?.toString() }\r\n        ],\r\n        temperature: 0.7,\r\n        max_tokens: -1,\r\n        stream: false\r\n      };\r\n      return this.http.post(url, body, { headers: { 'Content-Type': 'application/json' } }).subscribe((object => console.log(object)));\r\n    }\r\n    return null\r\n  }\r\n  giveDifferentWording() {\r\n    const url = 'http://localhost:1234/v1/chat/completions';\r\n\r\n    if (window.getSelection) {\r\n      let selection = window.getSelection();\r\n      const body = {\r\n        messages: [\r\n          { role: 'system', content: 'Reword the specific message, do not say anything before or after the rewording.' },\r\n          { role: 'user', content: selection?.toString() }\r\n        ],\r\n        temperature: 0.7,\r\n        max_tokens: -1,\r\n        stream: false\r\n      };\r\n      return this.http.post(url, body, { headers: { 'Content-Type': 'application/json' } }).subscribe((object => console.log(object)));\r\n    }\r\n    return null\r\n  }\r\n}",
            "styleUrl": "./text-editor.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<angular-editor id=\"editor\" [(ngModel)]=\"htmlContent\" [config]=\"editorConfig\"></angular-editor>"
        },
        {
            "name": "ThemeSwitchComponent",
            "id": "component-ThemeSwitchComponent-5f1a5599ae2d37577f0c6a87aac3567a3c3c5724150cbc0f2461c4c9e5e78e75ffbd6a0f3615f9c3bd1a11d340d90398a823e8acd68ac6e0f3f813215f8072a7",
            "file": "src/app/theme-switch/theme-switch.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-theme-switch",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./theme-switch.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "themes",
                    "defaultValue": "THEMES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "themeService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ThemeService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onThemeChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "Theme | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Theme | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ThemeService, Theme, THEMES } from '../../services/theme-service';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-theme-switch',\n  standalone: true,\n  imports: [\n    CommonModule, FormsModule\n  ],\n  templateUrl: './theme-switch.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ThemeSwitchComponent {\n  themes = THEMES;\n  constructor(public themeService: ThemeService) { }\n\n  onThemeChange(value: Theme | null) {\n    if (value) this.themeService.setTheme(value);\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"dropdown-container bg-opacity-0 p-2 flex align-middle items-center justify-center\">\n  <select id=\"theme-selector\" class=\"dropdown bg-button px-4 py-2 capitalize text-primary focus:outline-none rounded-md hover:bg-button-hover\"\n          [ngModel]=\"themeService.getCurrentTheme()\" (ngModelChange)=\"onThemeChange($event)\">\n    <option class=\"dropdown-option bg-button-hover border-0\" *ngFor=\"let theme of themes\" [value]=\"theme\">{{ theme }}</option>\n  </select>\n</div>\n"
        },
        {
            "name": "WritingWorkspaceComponent",
            "id": "component-WritingWorkspaceComponent-f9057012eb966093c85bf10643fe3da52a9194b0078c9d0aca67e899d170108f3b3754b3adc9bec06f925e8447e6f7dfb118b2724d16a56d3879e931fe2f5baa",
            "file": "src/app/writing-workspace/writing-workspace.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-writing-workspace",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./writing-workspace.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "book",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FirebaseBook | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "bookId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "chapter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Chapter | undefined",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "chapterId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "retrieveChapter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "retrieveData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ChapterOrganizerComponent",
                    "type": "component"
                },
                {
                    "name": "TextEditorComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChapterOrganizerComponent } from './../chapter-organiser/chapter-organiser.component';\nimport { Component, OnInit, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { FirestoreService } from '../../services/firestore.service';\nimport { AuthService } from '../../services/auth.service';\nimport { FirebaseBook } from '../../models/Book';\nimport { Chapter } from '../../models/Chapter';\nimport { CommonModule } from '@angular/common';\nimport { TextEditorComponent } from '../text-editor/text-editor.component';\n\n@Component({\n  selector: 'app-writing-workspace',\n  standalone: true,\n  imports: [\n    CommonModule, ChapterOrganizerComponent, TextEditorComponent\n  ],\n  templateUrl: './writing-workspace.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WritingWorkspaceComponent implements OnInit {\n  bookId: string | null = null;\n  chapterId: string | null = null;\n  book: FirebaseBook | undefined;\n  chapter: Chapter | undefined;\n\n  constructor(\n    private route: ActivatedRoute,\n    private firestoreService: FirestoreService,\n    private authService: AuthService,\n    private changeDetector: ChangeDetectorRef\n  ) { }\n\n  ngOnInit(): void {\n    this.authService.isSignedIn().subscribe(authenticated => {\n      if (authenticated) {\n        this.retrieveData();\n      } else {\n        console.error('User not authenticated');\n        // Handle unauthenticated user scenario\n      }\n    });\n  }\n\n  private retrieveData(): void {\n    this.bookId = this.route.snapshot.paramMap.get('bookId');\n    this.chapterId = this.route.snapshot.paramMap.get('chapterId');\n\n    if (this.bookId) {\n\n    }\n  }\n\n  private retrieveChapter(): void {\n    if (this.bookId && this.chapterId) {\n\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "firestoreService",
                        "type": "FirestoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "firestoreService",
                        "type": "FirestoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container grid grid-cols-11 gap-6 m-4 h-screen\">\n  <div class=\"col-span-3\">\n    <app-chapter-organiser [chapters]=\"book?.chaptersInfo\"></app-chapter-organiser>\n  </div>\n  <div class=\"col-start-4 col-span-7\">\n    <app-text-editor></app-text-editor>\n  </div>\n  <div class=\"col-start-11 flex flex-col gap-1 col-span-1\">\n    <button class=\"text-md px-6 py-2 bg-button text-primary rounded shadow hover:bg-button-hover hover:text-primary-hover hover:shadow-lg focus:outline-none active:bg-button-active transition ease-in-out duration-300\">Rewrite</button>\n  </div>\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    // Provide router for application routes\r\n    provideRouter(routes),\r\n\r\n    // Provide client hydration for Angular Universal (Server-Side Rendering)\r\n    provideClientHydration(),\r\n\r\n    // Import Firebase application initialized with environment-specific configuration\r\n    importProvidersFrom(provideFirebaseApp(() => initializeApp(environment.firebaseConfig))),\r\n\r\n    // Import providers for various Firebase services\r\n    importProvidersFrom(provideAuth(() => getAuth())),\r\n    importProvidersFrom(provideFirestore(() => getFirestore())),\r\n    importProvidersFrom(provideDatabase(() => getDatabase())),\r\n    importProvidersFrom(provideFunctions(() => getFunctions())),\r\n    importProvidersFrom(provideStorage(() => getStorage())),\r\n    { provide: FIREBASE_OPTIONS, useValue: environment.firebaseConfig },\r\n    importProvidersFrom(HttpClientModule),\r\n    provideHttpClient(withFetch()),\r\n    // ... include other providers as needed for your application\r\n  ]\r\n}"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/about/about.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/background/background.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/book-collection/book-collection.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  component: BookCollectionComponent,\r\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/chapter-organiser/chapter-organiser.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  component: ChapterOrganizerComponent,\r\n  props: {\r\n    chapters: ['File 1', 'File 2', 'File 3'],\r\n  },\r\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/home.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/navbar/navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/writing-workspace/writing-workspace.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  component: WritingWorkspaceComponent,\r\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/text-editor/text-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme-switch/theme-switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/book-collection/book-card/book-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  component: BookCardComponent,\r\n  props: { book: { title: 'Hello' } }\r\n\r\n})"
            },
            {
                "name": "editorConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/text-editor/editorDefaults.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AngularEditorConfig",
                "defaultValue": "{\r\n  editable: true,\r\n  spellcheck: true,\r\n  height: 'calc(100vh - 100px)',\r\n  minHeight: '0',\r\n  maxHeight: 'auto',\r\n  width: 'auto',\r\n  minWidth: '0',\r\n  translate: 'yes',\r\n  enableToolbar: true,\r\n  showToolbar: true,\r\n  placeholder: 'Write Chapter Here...',\r\n  defaultFontName: 'roboto',\r\n  fonts: [\r\n    { class: 'roboto', name: 'Roboto' },\r\n    { class: 'arial', name: 'Arial' },\r\n    { class: 'times-new-roman', name: 'Times New Roman' },\r\n  ],\r\n  sanitize: true,\r\n  toolbarPosition: 'top',\r\n  toolbarHiddenButtons: toolbarHiddenButtons,\r\n}"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/chapter-organiser/chapter-organiser.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  component: ChapterOrganizerComponent,\r\n  props: {\r\n    chapters: [],\r\n  },\r\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.template.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  firebaseConfig: {\r\n    projectId: \"your-production-projectId\",\r\n    appId: \"your-production-appId\",\r\n    databaseURL: \"your-production-databaseURL\",\r\n    storageBucket: \"your-production-storageBucket\",\r\n    apiKey: \"your-production-apiKey\",\r\n    authDomain: \"your-production-authDomain\",\r\n    messagingSenderId: \"your-production-messagingSenderId\",\r\n    measurementId: \"your-production-measurementId\"\r\n  }\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  firebaseConfig: {\r\n    projectId: \"your-production-projectId\",\r\n    appId: \"your-production-appId\",\r\n    databaseURL: \"your-production-databaseURL\",\r\n    storageBucket: \"your-production-storageBucket\",\r\n    apiKey: \"your-production-apiKey\",\r\n    authDomain: \"your-production-authDomain\",\r\n    messagingSenderId: \"your-production-messagingSenderId\",\r\n    measurementId: \"your-production-measurementId\"\r\n  }\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.template.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  firebaseConfig: {\r\n    projectId: \"your-dev-projectId\",\r\n    appId: \"your-dev-appId\",\r\n    databaseURL: \"your-dev-databaseURL\",\r\n    storageBucket: \"your-dev-storageBucket\",\r\n    apiKey: \"your-dev-apiKey\",\r\n    authDomain: \"your-dev-authDomain\",\r\n    messagingSenderId: \"your-dev-messagingSenderId\",\r\n    measurementId: \"your-dev-measurementId\"\r\n  }\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  firebaseConfig: {\r\n    apiKey: \"AIzaSyCvWDT6ja3EdhL1FnOyitgUO1whXN30XUw\",\r\n    authDomain: \"pseudo-write-dev.firebaseapp.com\",\r\n    databaseURL: \"https://pseudo-write-dev-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"pseudo-write-dev\",\r\n    storageBucket: \"pseudo-write-dev.appspot.com\",\r\n    messagingSenderId: \"813553463399\",\r\n    appId: \"1:813553463399:web:d8bba241cf950c2f7d24c2\",\r\n    measurementId: \"G-S1F5D1JRHV\"\r\n  }\r\n}"
            },
            {
                "name": "ManyBooks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/book-collection/book-collection.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  component: BookCollectionComponent,\r\n  props: { books: [{ title: 'Hello' }, { title: 'The beautiful Mermaid' }, { title: 'The Barbarian & The wild woman' }, { title: 'Batman & Not Robin' }, { title: '7 Heralds' }, { title: 'Samanthat & Melf' }, { title: 'Trouble In Hell' }, { title: 'Temporal Tempest' }] }\r\n})"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      providers: [\r\n        { provide: AuthService, useClass: MockAuthService },\r\n        { provide: AngularFirestore, useClass: MockAngularFirestore },\r\n        { provide: ActivatedRoute, useValue: mockActivatedRoute },\r\n      ],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "serverConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering(),\r\n  ]\r\n}"
            },
            {
                "name": "THEMES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/services/theme-service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['light', 'dark', 'focus']"
            },
            {
                "name": "toolbarHiddenButtons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/text-editor/editorDefaults.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  [\r\n    'subscript',\r\n    'superscript',\r\n  ],\r\n  [\r\n    'fontSize',\r\n    'textColor',\r\n    'backgroundColor',\r\n    'customClasses',\r\n    'link',\r\n    'unlink',\r\n    'insertImage',\r\n    'insertVideo',\r\n    'insertHorizontalRule',\r\n    'toggleEditorMode'\r\n  ]\r\n]"
            },
            {
                "name": "WithoutBook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/book-collection/book-card/book-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  component: BookCardComponent,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Theme",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"light\" | \"dark\" | \"focus\"",
                "file": "src/services/theme-service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    // Provide router for application routes\r\n    provideRouter(routes),\r\n\r\n    // Provide client hydration for Angular Universal (Server-Side Rendering)\r\n    provideClientHydration(),\r\n\r\n    // Import Firebase application initialized with environment-specific configuration\r\n    importProvidersFrom(provideFirebaseApp(() => initializeApp(environment.firebaseConfig))),\r\n\r\n    // Import providers for various Firebase services\r\n    importProvidersFrom(provideAuth(() => getAuth())),\r\n    importProvidersFrom(provideFirestore(() => getFirestore())),\r\n    importProvidersFrom(provideDatabase(() => getDatabase())),\r\n    importProvidersFrom(provideFunctions(() => getFunctions())),\r\n    importProvidersFrom(provideStorage(() => getStorage())),\r\n    { provide: FIREBASE_OPTIONS, useValue: environment.firebaseConfig },\r\n    importProvidersFrom(HttpClientModule),\r\n    provideHttpClient(withFetch()),\r\n    // ... include other providers as needed for your application\r\n  ]\r\n}"
                }
            ],
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ],
            "src/app/app.config.server.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
                },
                {
                    "name": "serverConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideServerRendering(),\r\n  ]\r\n}"
                }
            ],
            "src/app/about/about.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/about/about.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({})"
                }
            ],
            "src/app/background/background.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/background/background.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({})"
                }
            ],
            "src/app/book-collection/book-collection.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/book-collection/book-collection.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: BookCollectionComponent,\r\n})"
                },
                {
                    "name": "ManyBooks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/book-collection/book-collection.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: BookCollectionComponent,\r\n  props: { books: [{ title: 'Hello' }, { title: 'The beautiful Mermaid' }, { title: 'The Barbarian & The wild woman' }, { title: 'Batman & Not Robin' }, { title: '7 Heralds' }, { title: 'Samanthat & Melf' }, { title: 'Trouble In Hell' }, { title: 'Temporal Tempest' }] }\r\n})"
                }
            ],
            "src/app/chapter-organiser/chapter-organiser.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/chapter-organiser/chapter-organiser.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: ChapterOrganizerComponent,\r\n  props: {\r\n    chapters: ['File 1', 'File 2', 'File 3'],\r\n  },\r\n})"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/chapter-organiser/chapter-organiser.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: ChapterOrganizerComponent,\r\n  props: {\r\n    chapters: [],\r\n  },\r\n})"
                }
            ],
            "src/app/home/home.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/home.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({})"
                }
            ],
            "src/app/navbar/navbar.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/navbar/navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({})"
                }
            ],
            "src/app/writing-workspace/writing-workspace.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/writing-workspace/writing-workspace.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: WritingWorkspaceComponent,\r\n})"
                }
            ],
            "src/app/text-editor/text-editor.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/text-editor/text-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({})"
                }
            ],
            "src/app/theme-switch/theme-switch.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme-switch/theme-switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({})"
                }
            ],
            "src/app/book-collection/book-card/book-card.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/book-collection/book-card/book-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: BookCardComponent,\r\n  props: { book: { title: 'Hello' } }\r\n\r\n})"
                },
                {
                    "name": "WithoutBook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/book-collection/book-card/book-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: BookCardComponent,\r\n})"
                }
            ],
            "src/app/text-editor/editorDefaults.ts": [
                {
                    "name": "editorConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/text-editor/editorDefaults.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AngularEditorConfig",
                    "defaultValue": "{\r\n  editable: true,\r\n  spellcheck: true,\r\n  height: 'calc(100vh - 100px)',\r\n  minHeight: '0',\r\n  maxHeight: 'auto',\r\n  width: 'auto',\r\n  minWidth: '0',\r\n  translate: 'yes',\r\n  enableToolbar: true,\r\n  showToolbar: true,\r\n  placeholder: 'Write Chapter Here...',\r\n  defaultFontName: 'roboto',\r\n  fonts: [\r\n    { class: 'roboto', name: 'Roboto' },\r\n    { class: 'arial', name: 'Arial' },\r\n    { class: 'times-new-roman', name: 'Times New Roman' },\r\n  ],\r\n  sanitize: true,\r\n  toolbarPosition: 'top',\r\n  toolbarHiddenButtons: toolbarHiddenButtons,\r\n}"
                },
                {
                    "name": "toolbarHiddenButtons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/text-editor/editorDefaults.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  [\r\n    'subscript',\r\n    'superscript',\r\n  ],\r\n  [\r\n    'fontSize',\r\n    'textColor',\r\n    'backgroundColor',\r\n    'customClasses',\r\n    'link',\r\n    'unlink',\r\n    'insertImage',\r\n    'insertVideo',\r\n    'insertHorizontalRule',\r\n    'toggleEditorMode'\r\n  ]\r\n]"
                }
            ],
            "src/environments/environment.prod.template.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.template.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  firebaseConfig: {\r\n    projectId: \"your-production-projectId\",\r\n    appId: \"your-production-appId\",\r\n    databaseURL: \"your-production-databaseURL\",\r\n    storageBucket: \"your-production-storageBucket\",\r\n    apiKey: \"your-production-apiKey\",\r\n    authDomain: \"your-production-authDomain\",\r\n    messagingSenderId: \"your-production-messagingSenderId\",\r\n    measurementId: \"your-production-measurementId\"\r\n  }\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  firebaseConfig: {\r\n    projectId: \"your-production-projectId\",\r\n    appId: \"your-production-appId\",\r\n    databaseURL: \"your-production-databaseURL\",\r\n    storageBucket: \"your-production-storageBucket\",\r\n    apiKey: \"your-production-apiKey\",\r\n    authDomain: \"your-production-authDomain\",\r\n    messagingSenderId: \"your-production-messagingSenderId\",\r\n    measurementId: \"your-production-measurementId\"\r\n  }\r\n}"
                }
            ],
            "src/environments/environment.template.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.template.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  firebaseConfig: {\r\n    projectId: \"your-dev-projectId\",\r\n    appId: \"your-dev-appId\",\r\n    databaseURL: \"your-dev-databaseURL\",\r\n    storageBucket: \"your-dev-storageBucket\",\r\n    apiKey: \"your-dev-apiKey\",\r\n    authDomain: \"your-dev-authDomain\",\r\n    messagingSenderId: \"your-dev-messagingSenderId\",\r\n    measurementId: \"your-dev-measurementId\"\r\n  }\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  firebaseConfig: {\r\n    apiKey: \"AIzaSyCvWDT6ja3EdhL1FnOyitgUO1whXN30XUw\",\r\n    authDomain: \"pseudo-write-dev.firebaseapp.com\",\r\n    databaseURL: \"https://pseudo-write-dev-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"pseudo-write-dev\",\r\n    storageBucket: \"pseudo-write-dev.appspot.com\",\r\n    messagingSenderId: \"813553463399\",\r\n    appId: \"1:813553463399:web:d8bba241cf950c2f7d24c2\",\r\n    measurementId: \"G-S1F5D1JRHV\"\r\n  }\r\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      providers: [\r\n        { provide: AuthService, useClass: MockAuthService },\r\n        { provide: AngularFirestore, useClass: MockAngularFirestore },\r\n        { provide: ActivatedRoute, useValue: mockActivatedRoute },\r\n      ],\r\n    }),\r\n  ],\r\n}"
                }
            ],
            "src/services/theme-service.ts": [
                {
                    "name": "THEMES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/services/theme-service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['light', 'dark', 'focus']"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/services/theme-service.ts": [
                {
                    "name": "Theme",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"light\" | \"dark\" | \"focus\"",
                    "file": "src/services/theme-service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/about/about.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/about/about.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/background/background.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BackgroundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/background/background.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/book-collection/book-card/book-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/book-collection/book-card/book-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/book-collection/book-card/book-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutBook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/book-collection/book-collection.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookCollectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/book-collection/book-collection.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/book-collection/book-collection.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ManyBooks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/chapter-organiser/book-title/book-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookTitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/chapter-organiser/chapter-organiser.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChapterOrganizerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/chapter-organiser/chapter-organiser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/chapter-organiser/chapter-organiser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/chapter-organiser/chapter/chapter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChapterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navbar/navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/text-editor/editorDefaults.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editorConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/text-editor/editorDefaults.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "toolbarHiddenButtons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/text-editor/text-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/text-editor/text-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/theme-switch/theme-switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThemeSwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/theme-switch/theme-switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-workspace/writing-workspace.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WritingWorkspaceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-workspace/writing-workspace.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.template.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/models/Book.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Book",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/models/Book.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FirebaseBook",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/models/Chapter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Chapter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/models/Chapter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FirebaseChapter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/models/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FirebaseUser",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/services/firestore.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FirestoreService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/services/storage-service.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/services/text-generation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TextGenerationService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/services/theme-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/services/theme-service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THEMES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}